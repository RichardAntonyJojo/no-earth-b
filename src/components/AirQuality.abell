<AbellComponent>
{{ 
  const process = require('process');
  require('dotenv').config()
  
  const paramInfo = require('../data/aqi-params.json');
}}
<template>
  <section class="container" id="air-quality">
    <h2>Air Quality Index</h2>
    <div class="aqi-card">
      <div class="city-information">
        <div class="city-name">----</div>
        <div class="change-city-container"><button id="change-city-button">Change City</button></div>
        <form class="city-name-select" onsubmit="return false">
          <div class="row">
            <div>
              <label for="city-name-autocomplete">Select City</label>
              <input id="city-name-autocomplete" type="text" autocomplete="off" />
            </div>
            <div class="flex-1">
              <button class="search-button">Search</button>
            </div>
          </div>
          <div class="autocomplete-items shadow"></div>
        </form>
        <div class="air-quality-detailed-numbers">
          <table id="aqi-table"></table>
          <p class="text-small">All values are in AQI format.</p>
        </div>
      </div>
      <div class="air-quality-number">
        <span class="air-quality-value">00</span> AQI
        <div>
          <div class="aqi-bar"><div class="aqi-level"></div></div>
          <span id="aqi-message">--</span>
        </div>
      </div>
    </div>
    <div>
      <details>
        <summary>Explanation of AQI Parameters</summary>
        <table id="aqi-params"></table>
      </details>
      <p class="text-medium">Read more about how values are calculated at <a target="_blank" href="https://www.airnow.gov/sites/default/files/2020-05/aqi-technical-assistance-document-sept2018.pdf">Airnow's AQI Technical Assistance Document</a></p>
    </div>
  </section>
</template>

<script>
// Assign value to client-side variable from Node-side variable.
const paramInfo = {{ JSON.stringify(paramInfo) }}

const debounce = (func, delay) => { 
  let debounceTimer 
  return function() {
    const context = this
    const args = arguments 
    clearTimeout(debounceTimer) 
    debounceTimer = setTimeout(() => func.apply(context, args), delay) 
  }
}

async function fetchPollutionParameters(location='here') {
  let apiResponse;
  if (typeof location === 'string') {
    apiResponse = await fetch(`https://api.waqi.info/feed/${location}/?token={{ process.env.AQI_TOKEN }}`).then(res => res.json());
  } else {
    apiResponse = await fetch(`https://api.waqi.info/feed/geo:${location.latitude};${location.longitude}/?token={{ process.env.AQI_TOKEN }}`).then(res => res.json());
  }

  if (apiResponse.status === 'error') {
    alert('Data for this city is not found');
    return;
  }

  return apiResponse.data;
}

function setAirQualityCard(res) {
  if (!res) {
    return;
  }

  scopedSelector('.city-name').innerHTML = res.city.name;
  scopedSelector('.air-quality-value').innerHTML = res.aqi;
  const tableHeads = Object.keys(res.iaqi)
    .map((key) => `<th>${key}</th>`).join('');
  const tableData = Object.values(res.iaqi)
    .map((valObj) => `<td>${Math.round(valObj.v * 1000) / 1000}</td>`).join('');
  
  scopedSelector('#aqi-table').innerHTML = 
    `<tr>${tableHeads}</tr><tr>${tableData}</tr>`

  scopedSelector('#aqi-params').innerHTML = Object.keys(res.iaqi).map(aqiParameter => {
    
    return `
      <tr>
        <td>${
          aqiParameter in paramInfo.paramNames
          ? `${paramInfo.paramNames[aqiParameter]} (${aqiParameter})`
          : aqiParameter
        }</td>
        <td>${
          aqiParameter in paramInfo.desc
          ? paramInfo.desc[aqiParameter] 
          : '- No Info Avaiable -'
        }</td>
      </tr>
    `
  }).join('')


  // aqi bar
  let aqiVal = {};
  if (res.aqi <= 50) {
    aqiVal = paramInfo.aqiLevels['0-50'];
  } else if (res.aqi > 50 && res.aqi <= 100) {
    aqiVal = paramInfo.aqiLevels['51-100'];
  } else if (res.aqi > 100 && res.aqi <= 150) {
    aqiVal = paramInfo.aqiLevels['101-150'];
  } else if (res.aqi > 150 && res.aqi <= 200) {
    aqiVal = paramInfo.aqiLevels['151-200'];
  } else if (res.aqi > 200 && res.aqi <= 300) {
    aqiVal = paramInfo.aqiLevels['201-300'];
  } else {
    aqiVal = paramInfo.aqiLevels['301+'];
  }

  scopedSelector('.aqi-level').style.width = `calc(100%*${aqiVal.level}/6)`;
  scopedSelector('.aqi-level').style.backgroundColor = aqiVal.color;
  scopedSelector('#aqi-message').innerText = aqiVal.message;
}

async function setAQICity(el) {
  console.log(el.dataset.details);
  const cityData = await fetch(el.dataset.details).then(res => res.json());
  scopedSelector('input#city-name-autocomplete').value = el.innerText;
  const params = await fetchPollutionParameters(cityData.location.latlon);
  setAirQualityCard(params);
  scopedSelector('.autocomplete-items').innerHTML = '';
}


async function setCityAutoComplete(event) {
  const inputValue = event.target.value;
  const teleportRes = await fetch(`https://api.teleport.org/api/cities/?search=${inputValue}&limit=5`).then(res => res.json());
  const cities = teleportRes._embedded["city:search-results"];
  scopedSelector('.autocomplete-items').innerHTML = cities.map((city, index) => `
    <button 
      data-details="${city._links["city:item"].href}" 
      onclick="setAQICity(this)"
      class="autocomplete-item autocomplete-${index}"
    >
      ${city.matching_full_name}
    </button>
  `).join('');
}

fetchPollutionParameters().then(setAirQualityCard);

scopedSelector('input#city-name-autocomplete')
  .addEventListener('keyup', debounce(setCityAutoComplete, 500));

scopedSelector('button#change-city-button')
  .addEventListener('click', e => {
    scopedSelector('.city-name-select').classList.toggle('show');
  })

scopedSelector('.search-button').addEventListener('click', e => {
  let cityName = scopedSelector('input#city-name-autocomplete').value.toLowerCase();
  cityName = cityName.slice(0, cityName.indexOf(','));
  fetchPollutionParameters(cityName).then(setAirQualityCard);
  scopedSelector('.autocomplete-items').innerHTML = '';
})
</script>


<style global>
#aqi-table,
#aqi-params {
  padding: 10px;
}

table#aqi-table {
  border-collapse: collapse;
  font-size: 0.8rem;
}

table#aqi-params {
  font-size: 0.9rem;
}

table#aqi-table, table#aqi-table td, table#aqi-table th {
  border: 1px solid #ddd;
}

table#aqi-table td, table#aqi-table th {
  padding: 10px;
}

table#aqi-params td, table#aqi-params th {
  padding: 10px 70px 10px 10px;
  vertical-align: top;
}

table#aqi-params td:first-child {
  font-weight: bold;
  font-size: 1rem;
}

.autocomplete-items {
  border: 1px solid #ddd;
  position: absolute;
  background-color: #fff;
}

.autocomplete-items .autocomplete-item {
  display: block;
  border: 1px solid #ddd;
  border-left: none;
  font-size: 0.8rem;
  border-right: none;
  border-top: none;
  background-color: transparent;
  padding: 5px 10px;
  width: 100%;
  cursor: pointer;
  text-align: left;
}
</style>

<style>
.aqi-card {
  display: flex;
  padding: 80px 0px 20px 0px;
}

.air-quality-number {
  flex: 1;
  text-align: center;
  font-weight: bold;
  padding: 40px 0px;
  color: #999;
}

.aqi-bar {
  background-color: #eee;
  width: 100%;
  margin: 30px 0px;
  height: 10px;
  border-radius: 5px;
  overflow: hidden;
}

.aqi-level {
  background-color: #ff0;
  width: calc(100%*2/6);
  height: 100%;
}

.air-quality-value {
  font-size: 5rem;
  color: #222;
  font-weight: bold;
}

.air-quality-detailed-numbers {
  padding: 40px 0px;
}

.city-information {
  flex: 2;
}

.city-name {
  font-size: 2.3rem;
  color: #333;
}

.city-name-select {
  display: inline-block;
  width: 300px;
  position: relative;
  font-size: 0.8rem;
  display: none;
}

.city-name-select.show {
  display: block;
}

.city-name-select input {
  display: block;
  width: 100%;
  font-size: inherit;
}

.city-name-select .search-button {
  margin: 16px 5px 0px 5px;
  padding: 3px 5px;
  font-size: inherit;
  cursor: pointer;
}

.change-city-container {
  padding: 10px 2px;
}

.change-city-container button#change-city-button {
  border: none;
  background: transparent;
  cursor: pointer;
  color: #09f;
}

@media (max-width: 768px) {
  .aqi-card {
    flex-direction: column-reverse;
  }

  .air-quality-detailed-numbers {
    overflow-x: auto;
  }
}

</style>

</AbellComponent>